/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.project1;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.regex.Pattern;

/**
 *
 * @author user85
 */
public class Window extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form Window
     */
    public Window() {
        initComponents();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton evaluateBtn;
    private javax.swing.JButton reEnterBtn;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton manualBtn;
    private javax.swing.JTextField inputTextField;
    private javax.swing.JTextArea outputTextArea;
    private final String pattern = "[0-9\\-\\&\\|\\+]";
    ArrayList<String> expressionText;

    // End of variables declaration//GEN-END:variables

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold default state="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JLabel headingLabel = new JLabel();
        JLabel enterOpLabel = new JLabel();
        inputTextField = new javax.swing.JTextField();
        evaluateBtn = new javax.swing.JButton();
        JScrollPane jScrollPane1 = new JScrollPane();
        outputTextArea = new JTextArea();
        reEnterBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        manualBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Microprocessor code converter");
        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        headingLabel.setFont(new java.awt.Font("DejaVu Sans Mono", Font.BOLD, 22)); // NOI18N
        headingLabel.setText("MICROPROCESSOR CONVERTER");

        enterOpLabel.setFont(new java.awt.Font("Source Code Pro", Font.BOLD, 16)); // NOI18N
        enterOpLabel.setText("Enter Operation:");

        inputTextField.setFont(new java.awt.Font("Source Code Pro", Font.BOLD, 16)); // NOI18N
        //TODO fix request focus not working
        inputTextField.requestFocusInWindow();
        inputTextField.setToolTipText("Press Enter to evaluate");
        inputTextField.addActionListener(this);
        expressionText = new ArrayList<>();
        inputTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent documentEvent) {
                Document doc = documentEvent.getDocument();
                try {
                    String insertedText = doc.getText(documentEvent.getOffset(), documentEvent.getLength());
                    if (Pattern.matches(pattern, insertedText)) {
                        expressionText.add(insertedText);
                        /* debug
                    System.out.println(expressionText); */
                    } else {
                        filterDoc();
                    }
                } catch (BadLocationException e) {
                    throw new RuntimeException(e);
                }
            }

            @Override
            public void removeUpdate(DocumentEvent documentEvent) {
                try {
                    if (expressionText.isEmpty()) {
                        JOptionPane.showMessageDialog(null, "No expression Available");
                    }
                    expressionText.removeLast();
                    /* debug
                    System.out.println(expressionText); */
                } catch (RuntimeException e) {
                    throw new RuntimeException(e);
                }
            }

            @Override
            public void changedUpdate(DocumentEvent documentEvent) {
            }
        });

        evaluateBtn.setFont(new java.awt.Font("Nimbus Sans Narrow", Font.BOLD, 16)); // NOI18N
        evaluateBtn.setText("Evaluate");
        evaluateBtn.addActionListener(this);

        outputTextArea.setColumns(20);
        outputTextArea.setFont(new java.awt.Font("URW Gothic", Font.BOLD, 16)); // NOI18N
        outputTextArea.setRows(5);
        jScrollPane1.setViewportView(outputTextArea);

        reEnterBtn.setFont(new java.awt.Font("Nimbus Sans Narrow", Font.BOLD, 16)); // NOI18N
        reEnterBtn.setText("Re Enter");
        // TODO implement shortcut for re entering
        reEnterBtn.setToolTipText("Press Ctrl + R to re enter");
        reEnterBtn.addActionListener(this);

        saveBtn.setFont(new java.awt.Font("Nimbus Sans Narrow", Font.BOLD, 16)); // NOI18N
        saveBtn.setText("save");
        saveBtn.addActionListener(this);

        manualBtn.setFont(new java.awt.Font("Nimbus Sans Narrow", Font.BOLD, 16)); // NOI18N
        manualBtn.setText("manual");
        manualBtn.addActionListener(this);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(headingLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(manualBtn)
                        .addGap(0, 12, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(210, 210, 210)
                        .addComponent(reEnterBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(evaluateBtn)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(enterOpLabel)
                                    .addGap(31, 31, 31)
                                    .addComponent(inputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(0, 30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(headingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(manualBtn)
                        .addGap(32, 32, 32)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterOpLabel)
                    .addComponent(inputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(evaluateBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reEnterBtn)
                    .addComponent(saveBtn))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //TODO fix filter {
    // when you press the a letter/illegal symbol for the fast time it passes through the filter}
    // also the textField appear to wrap to next line when behaviour 1 occurs
    // the delete option does not work 100% of the time
    // then this error keeps popping up : AWT-EventQueue-0" java.lang.RuntimeException: java.lang.IndexOutOfBoundsException: Index -1 out of bounds for length 0
    //	at org.microprocessor.AppWindow$1.removeUpdate(AppWindow.java:68)
    // }
    @Override
    public void actionPerformed(ActionEvent actionEvent) {
        if(actionEvent.getSource() == evaluateBtn) {
            /* debug
            JOptionPane.showMessageDialog(null, "evaluate Btn Pressed"); */

            //pass the expression to the tokenizer so that it can be split up accordingly
            Tokenizer tokenMaker = new Tokenizer(this);
            tokenMaker.startEngine(expressionText);

        } else if(actionEvent.getSource() == saveBtn) {
            /*debug
            JOptionPane.showMessageDialog(null, "save Btn Pressed"); */

        } else if(actionEvent.getSource() == manualBtn) {
            /* debug
            JOptionPane.showMessageDialog(null, "manual Btn Pressed"); */

        } else if(actionEvent.getSource() == reEnterBtn) {
            /* debug
            JOptionPane.showMessageDialog(null, "Re-Enter Btn Pressed"); */
            inputTextField.setText("");
            inputTextField.requestFocusInWindow();
            outputTextArea.setText("");

        } else if(actionEvent.getSource() == inputTextField) {
            evaluateBtn.doClick();
        }
    }

    private void filterDoc() {
        ((AbstractDocument)inputTextField.getDocument()).setDocumentFilter(new DocumentFilter() {
            @Override
            public void insertString(FilterBypass fb, int offset, String string, AttributeSet attr) throws BadLocationException {
                if(string.matches(pattern)) {
                    super.insertString(fb, offset, string, attr);
                }
            }
            @Override
            public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attr) throws BadLocationException {
                if(text.matches(pattern)) {
                    super.replace(fb, offset, length, text, attr);
                }
            }
        });
    }

    public void updateTextArea(String text) {
        outputTextArea.append(text);
    }
}